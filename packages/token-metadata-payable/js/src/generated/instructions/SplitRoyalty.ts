/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SplitRoyalty
 * @category generated
 */
export const SplitRoyaltyStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'SplitRoyaltyInstructionArgs')
/**
 * Accounts required by the _SplitRoyalty_ instruction
 *
 * @property [] metadata Metadata key (pda of ['metadata', program id, mint id])
 * @property [_writable_, **signer**] owner Owner on the token account
 * @property [_writable_] token Account containing tokens from the metadata's mint
 * @category Instructions
 * @category SplitRoyalty
 * @category generated
 */
export type SplitRoyaltyInstructionAccounts = {
  metadata: web3.PublicKey
  owner: web3.PublicKey
  token: web3.PublicKey
}

export const splitRoyaltyInstructionDiscriminator = 41

/**
 * Creates a _SplitRoyalty_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category SplitRoyalty
 * @category generated
 */
export function createSplitRoyaltyInstruction(
  accounts: SplitRoyaltyInstructionAccounts,
  programId = new web3.PublicKey('h39cuaMfR1mQBrz4udyCJjVTKWuYuyGmdb6Nqw44F3d')
) {
  const [data] = SplitRoyaltyStruct.serialize({
    instructionDiscriminator: splitRoyaltyInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.metadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.token,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
